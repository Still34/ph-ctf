import argparse
import json
import re

from scapy.layers import l2
from scapy.plist import PacketList
from scapy.utils import wrpcap, rdpcap
import scapy.all

from helpers import xor_data

flag_re = '{.*}'
parser = argparse.ArgumentParser()
parser.add_argument("input", help="The source capture file to be modified.")
parser.add_argument("flag", help="The new flag to be written to the capture.")
parser.add_argument("-o", "--output", help="The output capture file; defaults to output.pcap.", default="output.pcap",
                    type=str, nargs='?')
args = parser.parse_args()
if not re.search(flag_re, args.flag):
    raise ValueError(f'Unexpected flag format. Flag must match the regular expression {flag_re}.')

packets = rdpcap(args.input)
new_packets = []
for packet in packets:
    ip_packet = packet.getlayer('IP')
    if ip_packet and ip_packet.dport == 433:
        raw_payload = ip_packet.getlayer('TCP').payload
        if not raw_payload:
            new_packets.append(packet)
            continue

        tcp_payload = bytes(raw_payload)
        key = tcp_payload[:4]

        raw_length = xor_data(tcp_payload[len(key): len(key) + 4], key)
        length = int.from_bytes(raw_length, 'big')

        base_length = len(key) + len(raw_length)
        data = xor_data(tcp_payload[base_length: base_length + length], key).decode('utf-8')
        deserialized_data = json.loads(data)
        if not re.search(flag_re, deserialized_data['Description']):
            new_packets.append(packet)
            continue

        deserialized_data['Description'] = args.flag
        new_json = json.dumps(deserialized_data).encode()
        new_data = xor_data(new_json, key)
        new_length = xor_data(key, len(new_data).to_bytes(2, 'big'))
        new_payload = key + new_length + new_data

        # checksum isn't validated by scapy upon rebuilt unless the property is missing
        del packet['IP'].len
        del packet['IP'].chksum
        del packet['TCP'].chksum

        raw_payload.load = new_payload
        packet['TCP'].payload = raw_payload
        new_packet = l2.Ether(packet.build())
        new_packets.append(new_packet)
    else:
        new_packets.append(packet)
new_plist = PacketList(new_packets)
wrpcap(args.output, new_plist)
print(f"Dumped the modified capture to {args.output}; be sure to verify with ctf-solve.py!")
